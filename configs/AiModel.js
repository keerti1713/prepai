const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey=process.env.GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);

  const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
  const generationConfig2 = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };

    export const courseOutlineAIModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a study material for Java for exam and level of difficulty will be moderate with summary of course, list of Chapters along with summary for each chapter , Topic list in each chapter, all result in JSON format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"courseSummary\": \"This Java study material covers fundamental and intermediate concepts crucial for a moderate-level Java exam.  It focuses on practical application and problem-solving skills, preparing students for a range of assessment styles.\",\n  \"chapters\": [\n    {\n      \"chapterTitle\": \"Introduction to Java\",\n      \"chapterSummary\": \"This chapter introduces the core concepts of Java programming, including its history, features, and the Java Development Kit (JDK) setup. It covers basic syntax and program structure.\",\n      \"topics\": [\n        \"What is Java?\",\n        \"History and Evolution of Java\",\n        \"Java Platform (JDK, JRE)\",\n        \"Setting up the JDK and IDE (e.g., Eclipse, IntelliJ)\",\n        \"Basic Syntax (variables, data types, operators)\",\n        \"Control Flow (if-else, switch, loops)\",\n        \"Input/Output (using Scanner)\",\n        \"First Java Program\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Object-Oriented Programming (OOP) Concepts\",\n      \"chapterSummary\": \"This chapter delves into the fundamental principles of Object-Oriented Programming (OOP) in Java, including classes, objects, inheritance, polymorphism, and encapsulation.  Emphasis is placed on practical application and understanding these concepts.\",\n      \"topics\": [\n        \"Classes and Objects\",\n        \"Constructors and Destructors\",\n        \"Encapsulation (access modifiers)\",\n        \"Inheritance (extends keyword, method overriding)\",\n        \"Polymorphism (method overloading, runtime polymorphism)\",\n        \"Abstraction (abstract classes and interfaces)\",\n        \"UML Diagrams (basic understanding)\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Arrays and Collections\",\n      \"chapterSummary\": \"This chapter covers the usage of arrays and various collection frameworks in Java, including lists, sets, and maps. It focuses on efficient data storage and manipulation.\",\n      \"topics\": [\n        \"Arrays (declaration, initialization, manipulation)\",\n        \"ArrayList\",\n        \"LinkedList\",\n        \"HashSet\",\n        \"TreeSet\",\n        \"HashMap\",\n        \"TreeMap\",\n        \"Iterators\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Exception Handling\",\n      \"chapterSummary\": \"This chapter explains how to handle exceptions in Java using try-catch blocks, finally blocks, and custom exceptions.  It emphasizes robust code design and error management.\",\n      \"topics\": [\n        \"Types of Exceptions (checked vs. unchecked)\",\n        \"try-catch-finally blocks\",\n        \"throw and throws keywords\",\n        \"Custom Exception Handling\",\n        \"Exception Propagation\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Input/Output (IO) and File Handling\",\n      \"chapterSummary\": \"This chapter covers different methods for reading and writing data to files, including character streams and byte streams. It also introduces serialization and deserialization.\",\n      \"topics\": [\n        \"File I/O (using FileReader, FileWriter, etc.)\",\n        \"Byte Streams (FileInputStream, FileOutputStream)\",\n        \"Character Streams (FileReader, FileWriter)\",\n        \"Buffered Streams\",\n        \"Serialization and Deserialization\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Multithreading\",\n      \"chapterSummary\": \"This chapter introduces the concepts of multithreading, including creating and managing threads, thread synchronization, and deadlock avoidance.  It focuses on concurrent programming basics.\",\n      \"topics\": [\n        \"Creating Threads (using Runnable and Thread)\",\n        \"Thread Life Cycle\",\n        \"Thread Synchronization (synchronized keyword)\",\n        \"Inter-thread communication (wait(), notify(), notifyAll())\",\n        \"Deadlocks and how to avoid them\"\n      ]\n    }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });
  


    export const generateNotesAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate detailed content for each chapter, ensuring all listed topics are thoroughly covered. Provide the content in HTML format (but exclude the  HTMLKL, head, body, title tag), the chapters:\n{\n\"chapterTitle\": \"Introduction to Python\",\n\"chapterSummary\": \"This chapter introduces the basics of Python, including its history, features, installation, and the fundamental elements of the language.\",\n\"topics\": [\n\"What is Python?\",\n\"Python's History and Features\",\n\"Setting up a Python environment\",\n\"Basic Syntax (variables, data types, operators)\",\n\"Control Flow (if-else, for, while loops)\",\n\"Input and Output\",\n\"Working with strings and numbers\",\n\"Comments and docstrings\"\n]\n}\n\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```html\n<div class=\"chapter\">\n  <h2>Chapter 1: Introduction to Python</h2>\n  <p><strong>Chapter Summary:</strong> This chapter introduces the basics of Python, including its history, features, installation, and the fundamental elements of the language.</p>\n\n  <section class=\"section\">\n    <h3>What is Python?</h3>\n    <p>Python is a high-level, general-purpose programming language known for its readability and ease of use.  Its design philosophy emphasizes code readability with the use of significant indentation.  It's an interpreted language, meaning code is executed line by line by an interpreter, without the need for a separate compilation step. This makes it easier for beginners to learn and debug. Python's versatility allows it to be used in diverse fields, including web development (with frameworks like Django and Flask), data science (with libraries like NumPy and Pandas), machine learning (with libraries like Scikit-learn and TensorFlow), scripting, and automation. </p>\n    <p>Key features that contribute to Python's popularity:</p>\n    <ul>\n      <li><strong>Beginner-friendly:</strong>  Its clear syntax and readability make it relatively easy to learn, even for those without prior programming experience.</li>\n      <li><strong>Versatile:</strong> Suitable for a wide range of applications, from simple scripts to complex software projects.</li>\n      <li><strong>Large and active community:</strong>  A vast community provides extensive support, libraries, and resources.</li>\n      <li><strong>Extensive libraries:</strong> Offers a rich ecosystem of pre-built modules and packages for various tasks, saving developers time and effort.</li>\n      <li><strong>Cross-platform compatibility:</strong> Runs on Windows, macOS, Linux, and other operating systems.</li>\n      <li><strong>Open-source:</strong>  Freely available and distributable, fostering collaboration and innovation.</li>\n    </ul>\n  </section>\n\n  <section class=\"section\">\n    <h3>Python's History and Features</h3>\n    <p>Python was conceived in the late 1980s by Guido van Rossum at the National Research Institute for Mathematics and Computer Science in the Netherlands.  Its development began in December 1989, and the first version (0.9.0) was released in February 1991.  It's named after the British comedy group Monty Python, reflecting its creator's sense of humor.</p>\n    <p><strong>Key Milestones:</strong></p>\n    <ul>\n      <li><strong>1991:</strong> Python 0.9.0 released.</li>\n      <li><strong>2000:</strong> Python 2.0 released, introducing significant new features.</li>\n      <li><strong>2008:</strong> Python 3.0 released, introducing major changes that were not backward compatible with Python 2. This led to a period where both versions coexisted.</li>\n      <li><strong>2020:</strong> Official end-of-life for Python 2.</li>\n    </ul>\n    <p><strong>Key Features (beyond those mentioned above):</strong></p>\n    <ul>\n      <li><strong>Object-oriented programming (OOP):</strong> Supports OOP principles, enabling modular and reusable code.</li>\n      <li><strong>Dynamically typed:</strong> Variable types are checked during runtime, reducing development time but requiring careful coding.</li>\n      <li><strong>Garbage collection:</strong> Automatic memory management simplifies development and prevents memory leaks.</li>\n      <li><strong>Exception handling:</strong>  Mechanisms for gracefully handling errors and preventing program crashes.</li>\n    </ul>\n  </section>\n\n  <section class=\"section\">\n    <h3>Setting up a Python environment</h3>\n    <p>Installing Python is typically straightforward. Visit the official Python website (<a href=\"https://www.python.org/\">https://www.python.org/</a>), download the installer for your operating system (Windows, macOS, Linux), and follow the installation instructions.  It's highly recommended to use a virtual environment for each project to manage dependencies effectively and avoid conflicts between projects.</p>\n    <p><strong>Virtual Environments:</strong> Tools like <code>venv</code> (built into Python 3) and <code>conda</code> (part of the Anaconda distribution) create isolated environments for your projects. This ensures that each project has its own set of libraries without interfering with others.</p>\n    <p><strong>Verification:</strong> After installation, open a terminal or command prompt and type <code>python --version</code> or <code>python3 --version</code> to check the installed version.</p>\n  </section>\n\n  <section class=\"section\">\n    <h3>Basic Syntax (variables, data types, operators)</h3>\n    <p>Python's syntax is designed for readability.  Variables are created upon assignment, and you don't need to explicitly declare their data types.  Python automatically infers the type.</p>\n    <p><strong>Data Types:</strong></p>\n    <ul>\n      <li><code>int</code> (integers): e.g., 10, -5</li>\n      <li><code>float</code> (floating-point numbers): e.g., 3.14, -2.5</li>\n      <li><code>str</code> (strings): e.g., \"hello\", 'Python'</li>\n      <li><code>bool</code> (booleans): <code>True</code>, <code>False</code></li>\n      <li><code>list</code> (ordered, mutable sequences): e.g., <code>[1, 2, 3]</code></li>\n      <li><code>tuple</code> (ordered, immutable sequences): e.g., <code>(1, 2, 3)</code></li>\n      <li><code>dict</code> (key-value pairs): e.g., <code>{\"name\": \"Alice\", \"age\": 30}</code></li>\n    </ul>\n    <p><strong>Operators:</strong> Python uses standard arithmetic operators (+, -, *, /, //, %, **), comparison operators (==, !=, <, >, <=, >=), logical operators (<code>and</code>, <code>or</code>, <code>not</code>), and assignment operators (=, +=, -=, *=, etc.).</p>\n    <pre><code class=\"python\">\nx = 10\ny = 3\nprint(x + y)  # Output: 13\nprint(x / y)  # Output: 3.333...\nprint(x // y) # Output: 3 (integer division)\nprint(x % y)  # Output: 1 (remainder)\n    </code></pre>\n  </section>\n\n  <section class=\"section\">\n    <h3>Control Flow (if-else, for, while loops)</h3>\n    <p><strong>If-else statements:</strong></p>\n    <pre><code class=\"python\">\nx = 10\nif x > 5:\n  print(\"x is greater than 5\")\nelif x == 5:\n  print(\"x is equal to 5\")\nelse:\n  print(\"x is less than 5\")\n    </code></pre>\n    <p><strong>For loops:</strong></p>\n    <pre><code class=\"python\">\nfor i in range(5):\n  print(i)  # Output: 0 1 2 3 4\n\nmy_list = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in my_list:\n  print(fruit)\n    </code></pre>\n    <p><strong>While loops:</strong></p>\n    <pre><code class=\"python\">\ncount = 0\nwhile count < 3:\n  print(count)\n  count += 1\n    </code></pre>\n  </section>\n\n  <section class=\"section\">\n    <h3>Input and Output</h3>\n    <p><strong>Input:</strong> The <code>input()</code> function reads user input from the console.</p>\n    <pre><code class=\"python\">\nname = input(\"Enter your name: \")\nprint(\"Hello, \" + name + \"!\")\n    </code></pre>\n    <p><strong>Output:</strong> The <code>print()</code> function displays output to the console.  You can use f-strings (formatted string literals) for easier string formatting:</p>\n    <pre><code class=\"python\">\nname = \"Alice\"\nage = 30\nprint(f\"My name is {name} and I am {age} years old.\")\n    </code></pre>\n  </section>\n\n  <section class=\"section\">\n    <h3>Working with strings and numbers</h3>\n    <p><strong>Strings:</strong> Python offers extensive string manipulation capabilities.  Strings are immutable (cannot be changed in place).</p>\n    <pre><code class=\"python\">\nmy_string = \"Hello, world!\"\nprint(my_string.upper())  # Output: HELLO, WORLD!\nprint(my_string.lower())  # Output: hello, world!\nprint(my_string.replace(\"world\", \"Python\")) # Output: Hello, Python!\n    </code></pre>\n    <p><strong>Numbers:</strong> Python supports various numerical operations and data types (integers, floats, complex numbers).</p>\n    <pre><code class=\"python\">\nx = 10\ny = 3.14\nprint(x + y)  # Output: 13.14\nprint(x * y)  # Output: 31.4\nimport math\nprint(math.sqrt(x)) # Output: 3.162...\n\n    </code></pre>\n  </section>\n\n  <section class=\"section\">\n    <h3>Comments and docstrings</h3>\n    <p><strong>Comments:</strong>  Use <code>#</code> for single-line comments and triple quotes (<code>'''</code> or <code>\"\"\"</code>) for multi-line comments.</p>\n    <pre><code class=\"python\">\n# This is a single-line comment\n'''\nThis is a\nmulti-line comment\n'''\n    </code></pre>\n    <p><strong>Docstrings:</strong>  Docstrings (documentation strings) are used to document code. They're placed within triple quotes at the beginning of functions, classes, or modules.  They're crucial for readability and creating documentation automatically using tools like Sphinx.</p>\n    <pre><code class=\"python\">\ndef my_function(a, b):\n  \"\"\"This function adds two numbers together.\n\n  Args:\n    a: The first number.\n    b: The second number.\n\n  Returns:\n    The sum of a and b.\n  \"\"\"\n  return a + b\n    </code></pre>\n  </section>\n</div>\n```"},
          ],
        },
      ],
    });

    export const generateStudyContentAiModel = model.startChat({
      generationConfig2,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the Flashcard on topic: Introduction to python, control flow and data structures, functions and modules, OOPs, file handling and Exception handling in JSON format with front back content, Maximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"front\": \"What is Python?\",\n    \"back\": \"Python is a high-level, interpreted, general-purpose programming language known for its readability and versatility.\"\n  },\n  {\n    \"front\": \"What are the main control flow statements in Python?\",\n    \"back\": \"if, elif, else; for; while\"\n  },\n  {\n    \"front\": \"Explain Python's `for` loop.\",\n    \"back\": \"Iterates over a sequence (list, tuple, string, etc.) or other iterable object.\"\n  },\n  {\n    \"front\": \"Explain Python's `while` loop.\",\n    \"back\": \"Repeats a block of code as long as a condition is true.\"\n  },\n  {\n    \"front\": \"List common Python data structures.\",\n    \"back\": \"Lists, tuples, dictionaries, sets\"\n  },\n  {\n    \"front\": \"What is a Python list?\",\n    \"back\": \"An ordered, mutable (changeable) sequence of items.\"\n  },\n  {\n    \"front\": \"What is a Python tuple?\",\n    \"back\": \"An ordered, immutable (unchangeable) sequence of items.\"\n  },\n  {\n    \"front\": \"What is a Python dictionary?\",\n    \"back\": \"An unordered collection of key-value pairs.\"\n  },\n  {\n    \"front\": \"What is a Python function?\",\n    \"back\": \"A block of reusable code that performs a specific task.\"\n  },\n  {\n    \"front\": \"What is a Python module?\",\n    \"back\": \"A file containing Python definitions and statements (functions, classes, variables).\"\n  },\n  {\n    \"front\": \"What is OOP (Object-Oriented Programming)?\",\n    \"back\": \"A programming paradigm based on the concept of 'objects', which can contain data and code: encapsulation, inheritance, polymorphism.\"\n  },\n  {\n    \"front\": \"Name three core OOP concepts.\",\n    \"back\": \"Encapsulation, Inheritance, Polymorphism\"\n  },\n  {\n    \"front\": \"How do you open a file in Python?\",\n    \"back\": \"Using the `open()` function, specifying the file path and mode (e.g., 'r' for reading, 'w' for writing).\"\n  },\n  {\n    \"front\": \"What is exception handling in Python?\",\n    \"back\": \"Using `try`, `except`, `else`, and `finally` blocks to handle runtime errors gracefully.\"\n  },\n  {\n    \"front\": \"What does the `try...except` block do?\",\n    \"back\": \"The `try` block contains code that might raise an exception.  The `except` block handles the exception if it occurs.\"\n  }\n]\n```\n"},
          ],
        },
      ],
    });

    export const generateQuizAiModel = model.startChat({
      generationConfig2,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate Quiz on topic: Introduction to Python, Functions, File handling and Exception handling, modules and libraries with Question and Options along with correct answer in JSON format, maximum 10"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"quiz\": {\n    \"title\": \"Introduction to Python\",\n    \"questions\": [\n      {\n        \"question\": \"What is the correct way to print 'Hello, world!' in Python?\",\n        \"options\": [\"print('Hello, world!')\", \"System.out.println('Hello, world!');\", \"Console.WriteLine('Hello, world!');\", \"echo 'Hello, world!'\"],\n        \"answer\": \"print('Hello, world!')\"\n      },\n      {\n        \"question\": \"Which data type is used to store a sequence of characters in Python?\",\n        \"options\": [\"int\", \"float\", \"bool\", \"str\"],\n        \"answer\": \"str\"\n      },\n      {\n        \"question\": \"What keyword is used to define a function in Python?\",\n        \"options\": [\"function\", \"def\", \"procedure\", \"method\"],\n        \"answer\": \"def\"\n      },\n      {\n        \"question\": \"What does the 'return' statement do in a Python function?\",\n        \"options\": [\"Prints the value\", \"Stops the execution of the function\", \"Returns a value from the function\", \"Starts a loop\"],\n        \"answer\": \"Returns a value from the function\"\n      },\n      {\n        \"question\": \"Which function is used to open a file in Python?\",\n        \"options\": [\"open()\", \"read()\", \"write()\", \"close()\"],\n        \"answer\": \"open()\"\n      },\n      {\n        \"question\": \"What is the purpose of a 'try-except' block in Python?\",\n        \"options\": [\"To define a loop\", \"To handle potential errors\", \"To create a function\", \"To open a file\"],\n        \"answer\": \"To handle potential errors\"\n      },\n      {\n        \"question\": \"Which of the following is NOT a common Python exception?\",\n        \"options\": [\"FileNotFoundError\", \"TypeError\", \"SyntaxError\", \"MathError\"],\n        \"answer\": \"MathError\" \n      },\n      {\n        \"question\": \"What is a module in Python?\",\n        \"options\": [\"A single line of code\", \"A type of data structure\", \"A file containing Python definitions and statements\", \"A type of loop\"],\n        \"answer\": \"A file containing Python definitions and statements\"\n      },\n      {\n        \"question\": \"Which module is commonly used for mathematical operations in Python?\",\n        \"options\": [\"string\", \"os\", \"math\", \"random\"],\n        \"answer\": \"math\"\n      },\n      {\n        \"question\": \"What does the 'import' keyword do?\",\n        \"options\": [\"Creates a new function\", \"Opens a file\", \"Loads a module into your program\", \"Prints a message\"],\n        \"answer\": \"Loads a module into your program\"\n      }\n    ]\n  }\n}\n```\n"},
          ],
        },
      ],
    });